#include <GLEW/glew.h>
#include <GLFW/glfw3.h>
#include <iostream>

// GLM MATH
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

using namespace std;

void draw() {
    GLenum mode = GL_TRIANGLES;
    GLsizei indices = 6;

    glDrawElements(mode, indices, GL_UNSIGNED_BYTE, nullptr);
}

/***************************************************************************************************************/
/* Create and compile shaders */
static GLuint CompileShader(const string& source, GLuint shaderType) {
    // shader object
    GLuint shaderID = glCreateShader(shaderType);
    const char* src = source.c_str();

    // attach source code to the shader object
    glShaderSource(shaderID, 1, &src, nullptr);

    // compile shader
    glCompileShader(shaderID);

    // return the ID of compiled shader
    return shaderID;
}

/***************************************************************************************************************/

/* Create program object */
static GLuint CreateShaderProgram(const string& vertexShader, const string& fragmentShader) {
    // compile vertex shader
    GLuint vertexShaderComp = CompileShader(vertexShader, GL_VERTEX_SHADER);

    // compile fragment shader
    GLuint fragmentShaderComp = CompileShader(fragmentShader, GL_FRAGMENT_SHADER);

    // create a program object
    GLuint shaderProgram = glCreateProgram();

    // Attach vertex and fragment shaders to program object
    glAttachShader(shaderProgram, vertexShaderComp);
    glAttachShader(shaderProgram, fragmentShaderComp);

    // link shader to create executable
    glLinkProgram(shaderProgram);

    // Delete shaders
    glDeleteShader(vertexShaderComp);
    glDeleteShader(fragmentShaderComp);

    // return shader program
    return shaderProgram;
}
/***************************************************************************************************************/

int main(void)
{
    GLFWwindow* window;

    /* Initialize the library */
    if (!glfwInit())
        return -1;

    /* Create a windowed mode window and its OpenGL context */
    window = glfwCreateWindow(2160, 1440, "Main Window", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }

    /* Make the window's context current */
    glfwMakeContextCurrent(window);

    /* Initialize GLEW */
    if (glewInit() != GLEW_OK)
        cout << "Error!" << endl;

    /***************************************************************************************************************/

    GLfloat vertices[] = {  /* creating a vertex array to store our x, y, and z positions */

        // Triangle 1            Color
         -0.5,-0.5, 0.0,    1.0, 0.0, 0.0, // vertex 0     
         -0.5, 0.5, 0.0,    0.0, 1.0, 0.0, // vertex 1  
          0.5,-0.5, 0.0,    0.0, 0.0, 1.0, // vertex 2 

        // Triangle 1            Color
          0.5, 0.5, 0.0,    1.0, 0.0, 0.0, // vertex 3     
         -0.5, 0.5, 0.0,    0.0, 1.0, 0.0, // vertex 4 
          0.5,-0.5, 0.0,    0.0, 0.0, 1.0  // vertex 5
    };

    /* When we look at triangle 1 and its three vertices we can understand that they are unique since its the first triangle. When we look at triangle two we can see that our 4th and
    5th vertices are actually the same as verticies 1 and 2. When we visualize this we can see that vertex 1 and 4 touch, and vertex 2 and 5 touch becuase they are the same point.
    Instead of having two vertices at the same point we can make each triangle share the vertices with index buffers. Below we create the indices array with the unique indices. We
    use the first triangle as the first 3 array vertices and then for the 2nd we use the shared verticies 1 and two and then use the only unique vertex for triangle 2, 3. Also
    remember to use GL_DRAW_ELEMENTS insteada of GL_DRAW since we are using the indices for the drawing.*/

    GLubyte indices[]{
        0, 1, 2,
        1, 2, 3
    };

    /***************************************************************************************************************/
    GLuint VBO, EBO, VAO; // Vertex vuffer object gets vertices on screen, EBO gets elements on screen for indices, VAO acts as a container for VBO and EBO

    glGenBuffers(1, &VBO); // Create vertex buffer object
    glGenBuffers(1, &EBO); // Create Element buffer object because we are using elements to draw indices

    glGenVertexArrays(1, &VAO); // Create our vertex array object which acts as a container for EBO and VBO
    glBindVertexArray(VAO); // select our VAO

    glBindBuffer(GL_ARRAY_BUFFER, VBO); // select VBO
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO); // select EBO

    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW); // load vertex attributes, type size data and draw
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW); // load indices

    /* specify attribute location and layout to gpu */
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GL_FLOAT), (GLvoid*)0);
    glEnableVertexAttribArray(0);

    /* for color */
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GL_FLOAT), (GLvoid*)(3 * sizeof(GL_FLOAT)));
    glEnableVertexAttribArray(1);

    glBindVertexArray(0); // closing it off

    /***************************************************************************************************************/

    glEnable(GL_DEPTH_TEST);

    /* vertex shader source code---when color information is added the shaders need to be updated */
    string vertexShaderSource =
        "#version 330 core\n"
        "layout(location = 0) in vec3 vPosition;"
        "layout(location = 1) in vec4 aColor;" // added for color attributes
        "out vec4 oColor;" // added for color attributes
        "uniform mat4 model;" // matrix
        "uniform mat4 view;"  // matrix
        "uniform mat4 projection;" // matrix
        "void main()\n"
        "{\n"
        "gl_Position = projection * view * model * vec4(vPosition, 1.0f);" // matrix multiplication to get our model view projection matrix
        "oColor = aColor;"  // added for color attributes
        "}\n";

    /*For my reference: we added our layout in location 1 which are our color attributes from our vertex array and glVertexAttrib and we set it equal to aColor
    then we create an output variable of oColor and set oColor to aColor so we can send it to our fragment shader. The in our fregment shader we create an input
    variable and set our fragColor to oColor which is equal to our aColor aka color attributes.*/

    /* fragment shader source code */
    string fragmentShaderSource =
        "#version 330 core\n"
        "in vec4 oColor;"  // added for color attributes
        "out vec4 fragColor;"
        "void main()\n"
        "{\n"
        //"fragColor = vec4(1.0, 0.0, 0.0, 1.0);" default color of red for original triangle
        "fragColor = oColor;" // added for color attributes
        "}\n";

    /***************************************************************************************************************/

    // Creating shader program
    GLuint shaderProgram = CreateShaderProgram(vertexShaderSource, fragmentShaderSource);

    /***************************************************************************************************************/

    /* Loop until the user closes the window */
    while (!glfwWindowShouldClose(window))
    {
        /* Render here */
        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        // model matrix 
        glm::mat4 model = glm::mat4(1.0f);
        model = glm::rotate(model, glm::radians(45.0f), glm::vec3(1.0f, 1.0, 1.0));
        model = glm::scale(model, glm::vec3(2.0f, 2.0f, 2.0f));
        model = glm::translate(model, glm::vec3(0.0f, 0.0f, 0.0f));

        // view matrix
        glm::mat4 view = glm::mat4(1.0f);
        view = glm::translate(view, glm::vec3(0.0f, 0.0f, -5.0f));

        // projection matrix
        glm::mat4 projection;
        projection = glm::perspective(glm::radians(45.0f), 2160.0f / 1440.0f, 0.1f, 100.0f);

        // sending the matrices to the shader
        glUseProgram(shaderProgram);
        unsigned int modelLoc = glGetUniformLocation(shaderProgram, "model");
        unsigned int viewLoc = glGetUniformLocation(shaderProgram, "view");
        unsigned int projectionLoc = glGetUniformLocation(shaderProgram, "projection");

        glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
        glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
        glUniformMatrix4fv(projectionLoc, 1, GL_FALSE, glm::value_ptr(projection));

        glBindVertexArray(VAO); // activate in every frame

        // Draw triangle
        draw();

        glBindVertexArray(0); // deactivate in every frame
        glUseProgram(0);

        /* Swap front and back buffers */
        glfwSwapBuffers(window);

        /* Poll for and process events */
        glfwPollEvents();
    }

    glfwTerminate();
    return 0;
}