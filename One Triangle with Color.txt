#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <GLEW/glew.h>
#include <GLFW/glfw3.h>
#include <iostream>

using namespace std;

// Draw Primitive(s)
void draw() {
    GLenum mode = GL_TRIANGLES;
    GLint first = 0;
    GLsizei count = 3;

    glDrawArrays(mode, first, count);

}

/***************************************************************************************************************/
/* Create and compile shaders */
static GLuint CompileShader(const string& source, GLuint shaderType) {
    // shader object
    GLuint shaderID = glCreateShader(shaderType);
    const char* src = source.c_str();

    // attach source code to the shader object
    glShaderSource(shaderID, 1, &src, nullptr);

    // compile shader
    glCompileShader(shaderID);

    // return the ID of compiled shader
    return shaderID;

}
/***************************************************************************************************************/
/* Create program object */
static GLuint CreateShaderProgram(const string& vertexShader, const string& fragmentShader) {
    // compile vertex shader
    GLuint vertexShaderComp = CompileShader(vertexShader, GL_VERTEX_SHADER);

    // compile fragment shader
    GLuint fragmentShaderComp = CompileShader(fragmentShader, GL_FRAGMENT_SHADER);

    // create a program object
    GLuint shaderProgram = glCreateProgram();

    // Attach vertex and fragment shaders to program object
    glAttachShader(shaderProgram, vertexShaderComp);
    glAttachShader(shaderProgram, fragmentShaderComp);

    // link shader to create executable
    glLinkProgram(shaderProgram);

    // Delete shaders
    glDeleteShader(vertexShaderComp);
    glDeleteShader(fragmentShaderComp);

    // return shader program
    return shaderProgram;
}
/***************************************************************************************************************/


int main(void)
{
    GLFWwindow* window;

    /* Initialize the library */
    if (!glfwInit())
        return -1;

    /* Create a windowed mode window and its OpenGL context */
    window = glfwCreateWindow(800, 640, "Main Window", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }

    /* Make the window's context current */
    glfwMakeContextCurrent(window);

    /* Initialize GLEW */
    if (glewInit() != GLEW_OK)
        cout << "Error!" << endl;

    /***************************************************************************************************************/

    GLfloat vertices[] = {  /* creating a vertex array to store our x, y, and z positions */
        
        // Triangle 1            Color
         -0.5, -0.5, 0.0,    1.0, 0.0, 0.0, // vertex 0     
         -0.5, 0.5, 0.0,     0.0, 1.0, 0.0, // vertex 1  
         0.5, -0.5, 0.0,     0.0, 0.0, 1.0  // vertex 2  
    };

    /***************************************************************************************************************/
    GLuint VBO;

    glGenBuffers(1, &VBO); // Create vertex buffer object
    glBindBuffer(GL_ARRAY_BUFFER, VBO); // select buffer
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW); // load vertex attributes, type size data and draw
        
    /* specify attribute location and layout to gpu */
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GL_FLOAT), (GLvoid*)0);
    glEnableVertexAttribArray(0);

    /* for color */
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GL_FLOAT), (GLvoid*)(3*sizeof(GL_FLOAT)));
    glEnableVertexAttribArray(1);
        
    /***************************************************************************************************************/
    /* vertex shader source code---when color information is added the shaders need to be updated */
    string vertexShaderSource =
        "#version 330 core\n"
        "layout(location = 0) in vec4 vPosition;"
        "layout(location = 1) in vec4 aColor;" // added for color attributes
        "out vec4 oColor;" // added for color attributes
        "void main()\n"
        "{\n"
        "gl_Position = vPosition;"
        "oColor = aColor;"  // added for color attributes
        "}\n";

    /*For my reference: we added our layout in location 1 which are our color attributes from our vertex array and glVertexAttrib and we set it equal to aColor
    then we create an output variable of oColor and set oColor to aColor so we can send it to our fragment shader. The in our fregment shader we create an input 
    variable and set our fragColor to oColor which is equal to our aColor aka color attributes.*/

    /* fragment shader source code */
    string fragmentShaderSource = 
        "#version 330 core\n"
        "in vec4 oColor;"  // added for color attributes
        "out vec4 fragColor;"
        "void main()\n"
        "{\n"
        //"fragColor = vec4(1.0, 0.0, 0.0, 1.0);" default color of red for original triangle
        "fragColor = oColor;" // added for color attributes
        "}\n";

    /***************************************************************************************************************/
    // Creating shader program
    GLuint shaderProgram = CreateShaderProgram(vertexShaderSource, fragmentShaderSource);

    // use shader program exe
    glUseProgram(shaderProgram);

    /* Loop until the user closes the window */
    while (!glfwWindowShouldClose(window))
    {
        /* Render here */
        glClear(GL_COLOR_BUFFER_BIT);

        // Draw triangle
        draw();

        /* Swap front and back buffers */
        glfwSwapBuffers(window);

        /* Poll for and process events */
        glfwPollEvents();
    }

    glfwTerminate();
    return 0;
}